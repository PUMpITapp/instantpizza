require "OrderStep2"

describe("Test OrderStep2, checkTestMode", function()

	it("test checkTestMode",function()
		local got = checkTestMode()
		assert.is_true(got)
		end)

	it("test chooseGfx", function()
		local got = chooseGfx()
		local expected_value = require "gfx_stub"
		assert.are.same(expected_value,got)
		end)

	it("test chooseText", function()
		local got = chooseText()
		local expected_value = require "write_text_stub"
		assert.are.same(expected_value,got)
		end)
end)

describe("Test OrderStep2, onKey", function()
	it("test Up", function()
		local expected_value = "up"
		local got = onKey('up','up')
		assert.are.same(expected_value,got)
		end)
	it("test Down", function()
		local expected_value = "down"
		local got = onKey('down','up')
		assert.are.same(expected_value,got)
		end)
	it("test Left", function()
		local expected_value = "left"
		local got = onKey('left','up')
		assert.are.same(expected_value,got)
		end)
	it("test Right", function()
		local expected_value = "right"
		local got = onKey('right','up')
		assert.are.same(expected_value,got)
		end)
	it("test blue", function()
		local expected_value = "OrderStep3.lua"
		local got = onKey('blue','up')
		assert.are.same(expected_value,got)
		end)
	it("test Red", function()
		local expected_value = 'OrderStep1.lua'
		local got = onKey('red','up')
		assert.are.same(expected_value,got)
	end)
	it("test Yellow", function()
		local expected_value = 'yellow'
		local got = onKey('yellow','up')
		assert.are.same(expected_value,got)
	end)		
end)

describe("Test OrderStep2, moveHighlightedInputField", function()

	it("When not at the top, pressing up", function()
		setYValuesForTesting((returnValuesForTesting("lowerBoundary")+1))
		moveHighlight('up')
		local got = returnValuesForTesting("highlightPosY")
		local expected_value = returnValuesForTesting("lowerBoundary") 
		assert.are.same(expected_value,got)
	end)

	it("When at the top of pizzas/drinks, pressing up", function()
		setYValuesForTesting((returnValuesForTesting("lowerBoundary")))
		moveHighlight('up')
		local got = returnValuesForTesting("highlightPosY")
		local expected_value = returnValuesForTesting("middleBoundary") 
		assert.are.same(expected_value,got)
	end)

	it("When at the top of sauces/sallads, pressing up", function()
		setYValuesForTesting((returnValuesForTesting("middleBoundary")+1))
		moveHighlight('up')
		local got = returnValuesForTesting("highlightPosY")
		local expected_value = returnValuesForTesting("middleBoundary") 
		assert.are.same(expected_value,got)
	end)

	it("When at the bottom, pressing down", function()
		setYValuesForTesting((returnValuesForTesting("upperBoundary")))
		moveHighlight('down')
		local got = returnValuesForTesting("highlightPosY")
		local expected_value = returnValuesForTesting("lowerBoundary") 
		assert.are.same(expected_value,got)
	end)

	it("When not at the bottom, pressing down", function()
		setYValuesForTesting((returnValuesForTesting("upperBoundary")-1))
		moveHighlight('down')
		local got = returnValuesForTesting("highlightPosY")
		local expected_value = returnValuesForTesting("upperBoundary") 
		assert.are.same(expected_value,got)
	end)

	it("When at the bottom of sauces, pressing down", function()
		setYValuesForTesting((returnValuesForTesting("upperBoundary")))
		moveHighlight('down')
		local got = returnValuesForTesting("highlightPosY")
		local expected_value = returnValuesForTesting("middleBoundary") + 1
		assert.are.same(expected_value,got)
	end)

	it("When at the right, pressing left", function()
		setXValuesForTesting(2)
		moveHighlight('left')
		local got = returnValuesForTesting("highlightPosX")
		local expected_value = returnValuesForTesting("column")
		assert.are.same(expected_value,got)
	end)
	it("When at the left, pressing left", function()
		setXValuesForTesting(1)
		moveHighlight('left')
		local got = returnValuesForTesting("highlightPosX")
		local expected_value = returnValuesForTesting("column")
		assert.are.same(expected_value,got)
	end)
	it("When at the left, pressing right", function()
		setXValuesForTesting(1)
		moveHighlight('right')
		local got = returnValuesForTesting("highlightPosX")
		local expected_value = returnValuesForTesting("column")
		assert.are.same(expected_value,got)
	end)
	it("When at the right, pressing right", function()
		setXValuesForTesting(2)
		moveHighlight('right')
		local got = returnValuesForTesting("highlightPosX")
		local expected_value = returnValuesForTesting("column")
		assert.are.same(expected_value,got)
	end)
end)